////
// Public API
// @group API
// @access public
////

/// Instanciate a gradient
/// @param {Direction} $direction - Gradient direction
/// @param {Arglist} $color-stops - List of color-stops
/// @return {Gradient} Gradient instance
@function sg-gradient($direction, $color-stops...) {
  $colors: sg-get-colors($color-stops);

  @return (
    "fallback": nth($colors, 1),
    "direction": $direction,
    "legacy-direction": sg-legacy-direction($direction),
    "authored-color-stops": $color-stops,
    "color-stops": sg-ensure-color-stops($color-stops),
    "colors": $colors,
    "length": length($colors)
  );
}


/// Property getter for a gradient
/// @param {Gradient} $gradient - Gradient instance
/// @param {String} $key - Key to fetch
/// @return {*}
/// @throw Throws an error if key doesn't exist.
@function sg-get($gradient, $key) {
  @if map-has-key($gradient, $key) == false {
    @error "Gradients do not have a key named `#{$key}`.";
  }

  @return map-get($gradient, $key);
}


/// Display a gradient instance, with its fallback
/// @param {Gradient} $gradient - Gradient instance
/// @param {Color} $fallback (sg-get($gradient, 'fallback')) - Color of first color stop
/// @output `background`
@mixin sg-display($gradient, $fallback: sg-get($gradient, "fallback")) {
  background: $fallback;
  background: linear-gradient(sg-get($gradient, "direction"), sg-get($gradient, "color-stops"));
}


/// Debug a gradient instance at root level in a `@debug-gradient` rule
/// @param {Gradient} $gradient - Gradient instance
/// @output `@debug-gradient` declaration
@mixin sg-debug($gradient) {
  @at-root {
    @debug-gradient {
      raw: inspect($gradient);

      @each $key, $value in $gradient {
        #{$key}: inspect($value);
      }
    }
  }
}
