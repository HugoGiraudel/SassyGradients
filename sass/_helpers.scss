////
//// Helpers
//// @group helpers
//// @access private
////

/// Return the position of the next full color stop.
/// @param {List} $color-stops - List of color-stops
/// @param {Number} $start-index (1) - Start index
/// @return {Number | Null} - Index or null
@function sg-get-next-full-color-stop-index($color-stops, $start-index: 1) {
  $length: length($color-stops);

  @for $i from $start-index through $length {
    @if length(nth($color-stops, $i)) == 2 {
      @return $i;
    }
  }

  @return null;
}


/// Make sure all color-stops from the the list are full color-stops.
/// @param {List} $color-stops - List of color-stops
/// @return {List} Updated color stops
@function sg-full-color-stops($color-stops) {
  $length: length($color-stops);

  @for $i from 1 through $length {
    $stop: nth($color-stops, $i);

    @if length($stop) == 1 {
      $computed-stop: null;

      @if $i == 1 {
        $computed-stop: 0%;
      } @else if $i == $length {
        $computed-stop: 100%;
      } @else {
        $previous-stop: nth(nth($color-stops, $i - 1), 2);

        $next-color-stop-index: sg-get-next-full-color-stop-index($color-stops, $i);
        $next-stop: if($next-color-stop-index, nth(nth($color-stops, $next-color-stop-index), 2), 100%);

        $computed-stop: $previous-stop + (($next-stop - $previous-stop) / (($next-color-stop-index or length($color-stops)) - $i + 1));
      }

      $color-stops: set-nth($color-stops, $i, $stop $computed-stop);
    }
  }

  @return $color-stops;
}


/// Extract colors from a list of color-stops.
/// This is not part of the public API, please use
/// `sg-get($gradient, "colors")` instead.
/// @param {List} $color-stops - List of color-stops
/// @return {List} List of colors
/// @example scss - Extra colors from a list of color-stops
/// $gradient: sg-gradient(to right, hotpink 42%, tomato);
/// $colors: sg-get-colors(sg-get($gradient, "color-stops"));
/// // hotpink, tomato
@function sg-get-colors($color-stops) {
  $colors: ();

  @each $stop in $color-stops {
    @if type-of(nth($stop, 1)) == "color" {
      $colors: append($colors, nth($stop, 1), comma);
    }
  }

  @return $colors;
}


/// Test whether a value is a direction for a gradient
/// @param {*} $value - Value to test
/// @return {Bool}
/// @example scss - Test whether `to right` is a direction
/// $is-direction: sg-is-direction(to right);
/// // true
/// @example scss - Test whether `42rad` is a direction
/// $is-direction: sg-is-direction(42rad);
/// // true
/// @example scss - Test whether `1337px` is a direction
/// $is-direction: sg-is-direction(1337px);
/// // false
@function sg-is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == "number" and index("deg" "grad" "turn" "rad", unit($value));

  @return $is-keyword or $is-angle;
}


/// Convert a direction to legacy syntax
/// @param {Direction} $value - Value to convert
/// @return {Direction} Legacy direction
/// @throw Throws an error if input value is not a direction
@function sg-legacy-direction($value) {
  @if sg-is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}


/// Turn a list of colors or color-stops into a list of stripes
/// @param {List} $colors - List of colors (or color-stops)
/// @return {List} List of full color-stops
@function sg-compute-stripes($colors) {
  $colors: sg-get-colors($colors);
  $length: length($colors);
  $stripes: ();

  @for $i from 1 through $length {
    $color: nth($colors, $i);

    @if $i > 1 {
      $stripes: append($stripes, $color nth(nth($stripes, -1), 2), "comma");
    }

    @if $i < $length {
      $stripes: append($stripes, $color (100% / $length * $i), "comma");
    }
  }

  @return $stripes;
}
